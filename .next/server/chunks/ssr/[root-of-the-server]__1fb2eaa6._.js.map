{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/fallback-small-talk-mode.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Implements a fallback small-talk mode for the chatbot.\n *\n * - smallTalk - A function that handles casual, non-serious questions.\n * - SmallTalkInput - The input type for the smallTalk function.\n * - SmallTalkOutput - The return type for the smallTalk function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SmallTalkInputSchema = z.object({\n  query: z.string().describe('The user query for casual conversation.'),\n});\nexport type SmallTalkInput = z.infer<typeof SmallTalkInputSchema>;\n\nconst SmallTalkOutputSchema = z.object({\n  response: z.string().describe('The chatbot response in small-talk mode.'),\n});\nexport type SmallTalkOutput = z.infer<typeof SmallTalkOutputSchema>;\n\nexport async function smallTalk(input: SmallTalkInput): Promise<SmallTalkOutput> {\n  return smallTalkFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'smallTalkPrompt',\n  input: {schema: SmallTalkInputSchema},\n  output: {schema: SmallTalkOutputSchema},\n  prompt: `You are a friendly chatbot engaging in a casual conversation.\n\n  User Query: {{{query}}}\n\n  Respond with a lighthearted and conversational answer. If the question is serious or outside the scope of casual conversation, indicate that you are switching back to assistant mode.`,\n});\n\nconst smallTalkFlow = ai.defineFlow(\n  {\n    name: 'smallTalkFlow',\n    inputSchema: SmallTalkInputSchema,\n    outputSchema: SmallTalkOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uBAAuB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGA,MAAM,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,UAAU,KAAqB;IACnD,OAAO,cAAc;AACvB;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoB;IACpC,QAAQ;QAAC,QAAQ;IAAqB;IACtC,QAAQ,CAAC;;;;wLAI6K,CAAC;AACzL;AAEA,MAAM,gBAAgB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAxBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/improve-user-query-suggestions.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for suggesting improved user queries.\n *\n * It takes an initial query as input and returns a list of suggested alternative queries.\n * @param {OriginalQueryInput} input - The input object containing the original query.\n * @returns {Promise<ImprovedQueryOutput>} - A promise that resolves to an object containing an array of suggested queries.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst OriginalQueryInputSchema = z.object({\n  originalQuery: z.string().describe('The original user query.'),\n});\n\nexport type OriginalQueryInput = z.infer<typeof OriginalQueryInputSchema>;\n\nconst ImprovedQueryOutputSchema = z.object({\n  suggestedQueries: z\n    .array(z.string())\n    .describe('An array of suggested alternative queries.'),\n});\n\nexport type ImprovedQueryOutput = z.infer<typeof ImprovedQueryOutputSchema>;\n\nexport async function getImprovedQuerySuggestions(\n  input: OriginalQueryInput\n): Promise<ImprovedQueryOutput> {\n  return improveUserQuerySuggestionsFlow(input);\n}\n\nconst improveUserQuerySuggestionsPrompt = ai.definePrompt({\n  name: 'improveUserQuerySuggestionsPrompt',\n  input: {schema: OriginalQueryInputSchema},\n  output: {schema: ImprovedQueryOutputSchema},\n  prompt: `You are an AI assistant that helps users refine their search queries.\n\n  Given the user's original query, suggest three alternative queries that are more specific, better phrased, or explore related aspects of the topic.\n\n  Original query: {{{originalQuery}}}\n\n  Suggested queries:`,\n});\n\nconst improveUserQuerySuggestionsFlow = ai.defineFlow(\n  {\n    name: 'improveUserQuerySuggestionsFlow',\n    inputSchema: OriginalQueryInputSchema,\n    outputSchema: ImprovedQueryOutputSchema,\n  },\n  async input => {\n    const {output} = await improveUserQuerySuggestionsPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACrC;AAIA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,kBAAkB,uIAAA,CAAA,IAAC,CAChB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;AACd;AAIO,eAAe,4BACpB,KAAyB;IAEzB,OAAO,gCAAgC;AACzC;AAEA,MAAM,oCAAoC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACxD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAwB;IACxC,QAAQ;QAAC,QAAQ;IAAyB;IAC1C,QAAQ,CAAC;;;;;;oBAMS,CAAC;AACrB;AAEA,MAAM,kCAAkC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,kCAAkC;IACzD,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { smallTalk } from \"@/ai/flows/fallback-small-talk-mode\";\nimport { getImprovedQuerySuggestions } from \"@/ai/flows/improve-user-query-suggestions\";\nimport type { Message } from \"@/lib/types\";\n\nexport async function handleMessage(\n  history: Message[],\n  userMessage: string\n): Promise<{\n  assistantResponse: string;\n  suggestions: string[];\n}> {\n  try {\n    const formattedHistory = history\n      .map((msg) => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.text}`)\n      .join('\\n');\n\n    const prompt = `You are a helpful personal assistant named Assistant AI. Your tone is professional yet friendly. Here is the conversation history so far:\n\n${formattedHistory}\n\nNew User Message: ${userMessage}\n\nPlease provide a helpful and conversational response.`;\n\n    const [assistantResult, suggestionsResult] = await Promise.allSettled([\n      smallTalk({ query: prompt }),\n      getImprovedQuerySuggestions({ originalQuery: userMessage }),\n    ]);\n\n    if (assistantResult.status === \"rejected\") {\n      console.error(\"Small talk flow failed:\", assistantResult.reason);\n      throw new Error(\"Failed to get a response from the assistant.\");\n    }\n    \n    const assistantResponse = assistantResult.value.response;\n    \n    const suggestions =\n      suggestionsResult.status === \"fulfilled\"\n        ? suggestionsResult.value.suggestedQueries\n        : [];\n\n    return { assistantResponse, suggestions };\n  } catch (error) {\n    console.error(\"Error in handleMessage action:\", error);\n    return {\n      assistantResponse: \"Sorry, I encountered an error. Please try again.\",\n      suggestions: [],\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAGO,eAAe,cACpB,OAAkB,EAClB,WAAmB;IAKnB,IAAI;QACF,MAAM,mBAAmB,QACtB,GAAG,CAAC,CAAC,MAAQ,GAAG,IAAI,IAAI,KAAK,SAAS,SAAS,YAAY,EAAE,EAAE,IAAI,IAAI,EAAE,EACzE,IAAI,CAAC;QAER,MAAM,SAAS,CAAC;;AAEpB,EAAE,iBAAiB;;kBAED,EAAE,YAAY;;qDAEqB,CAAC;QAElD,MAAM,CAAC,iBAAiB,kBAAkB,GAAG,MAAM,QAAQ,UAAU,CAAC;YACpE,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAD,EAAE;gBAAE,OAAO;YAAO;YAC1B,CAAA,GAAA,6JAAA,CAAA,8BAA2B,AAAD,EAAE;gBAAE,eAAe;YAAY;SAC1D;QAED,IAAI,gBAAgB,MAAM,KAAK,YAAY;YACzC,QAAQ,KAAK,CAAC,2BAA2B,gBAAgB,MAAM;YAC/D,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,oBAAoB,gBAAgB,KAAK,CAAC,QAAQ;QAExD,MAAM,cACJ,kBAAkB,MAAM,KAAK,cACzB,kBAAkB,KAAK,CAAC,gBAAgB,GACxC,EAAE;QAER,OAAO;YAAE;YAAmB;QAAY;IAC1C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO;YACL,mBAAmB;YACnB,aAAa,EAAE;QACjB;IACF;AACF;;;IA7CsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {handleMessage as '60cfde2822741c94f7e5b9197ec4ae2452c19a2221'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/chat/ChatWindow.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/chat/ChatWindow.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/chat/ChatWindow.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 493, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/chat/ChatWindow.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/chat/ChatWindow.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/chat/ChatWindow.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 517, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import ChatWindow from '@/components/chat/ChatWindow';\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-full flex-col items-center justify-center p-4 sm:p-8\">\n      <div className=\"w-full max-w-3xl\">\n        <ChatWindow />\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC,wIAAA,CAAA,UAAU;;;;;;;;;;;;;;;AAInB","debugId":null}}]
}